Making entities persistent:
==========================

DomesticCat fritz = new DomesticCat();
fritz.setColor( Color.GINGER );
fritz.setSex( 'M' );
fritz.setName( "Fritz" );
session.save( fritz );

Deleting entities
=================

session.delete( fritz );

Obtain an entity reference without initializing its data
========================================================

Book book = new Book();
book.setAuthor( session.byId( Author.class ).getReference( authorId ) );

Obtain an entity with its data initialized
==========================================

session.byId( Author.class ).load( authorId );

Obtain an entity by natural-id
==============================

@Entity
public class User {
	@Id
	@GeneratedValue
	Long id;

	@NaturalId
	String system;

	@NaturalId
	String userName;

	...
}

// use getReference() to create associations...
Resource aResource = (Resource) session.byId( Resource.class ).getReference( 123 );
User aUser = (User) session.byNaturalId( User.class )
		.using( "system", "prod" )
		.using( "userName", "steve" )
		.getReference();
aResource.assignTo( user );


// use load() to pull initialzed data
return session.byNaturalId( User.class )
		.using( "system", "prod" )
		.using( "userName", "steve" )
		.load();

Refresh entity state
====================
One case where this is useful is when it is known that the 
database state has changed since the data was read. 
Refreshing allows the current database 
state to be pulled into the entity instance and the persistence context.

Cat cat = session.get( Cat.class, catId );
...
session.refresh( cat );


Working with detached data
==========================

Detachment is the process of working with data outside the
scope of any persistence context. Data becomes detached in a number of ways.
Once the persistence context is closed, all data that was associated with
it becomes detached. Clearing the persistence context has the same effect.
Evicting a particular entity from the persistence context makes it detached. 
And finally, serialization will make the deserialized form be 
detached (the original instance is still managed).

Detached data can still be manipulated, however 
the persistence context will no longer automatically know about
these modification and the application will need to intervene to
make the changes persistent.

Example of reattaching a detached entity
========================================

session.saveOrUpdate( someDetachedCat );

Merging detached data
=====================

Merging is the process of taking an incoming entity instance that is in detached
state and copying its data over onto a new instance that is in managed state.

Cat theManagedInstance = session.merge( someDetachedCat );

Checking persistent state
=========================
An application can verify the state of entities and collections in 
relation to the persistence context.

assert session.contains( cat );

** OR lazy example:

if ( Hibernate.isInitialized( customer.getAddress() ) {
    //display address if loaded
}
if ( Hibernate.isInitialized( customer.getOrders()) ) ) {
    //display orders if loaded
}
if (Hibernate.isPropertyInitialized( customer, "detailedBio" ) ) {
    //display property detailedBio if loaded
}





